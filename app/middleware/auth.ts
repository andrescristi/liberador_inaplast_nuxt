/**
 * Middleware de autenticaci√≥n h√≠brida para p√°ginas protegidas
 * 
 * Verifica tanto JWT (localStorage) como session ID (cookie) 
 * siguiendo el sistema h√≠brido implementado
 * 
 * USO:
 * - definePageMeta({ middleware: 'auth' })
 * - Para p√°ginas que requieren autenticaci√≥n b√°sica
 * 
 * IMPORTANTE:
 * - Solo verifica autenticaci√≥n, NO autorizaci√≥n (roles)
 * - Para verificar roles espec√≠ficos usar middleware espec√≠fico
 * - Redirige a dashboard (/) despu√©s de login exitoso
 */
export default defineNuxtRouteMiddleware(async (to) => {
  // Skip durante SSR para evitar problemas de inicializaci√≥n
  if (import.meta.server) {
    console.log('üîí [Middleware Auth] Skipping on server side')
    return
  }
  
  console.log('üîí [Middleware Auth] Running on client side for route:', to.path)
  
  const { useHybridAuth } = await import('~/composables/auth/useHybridAuth')
  const { checkAuth, hasValidJWT } = useHybridAuth()
  
  // Verificaci√≥n r√°pida con JWT local primero
  console.log('üîç [Middleware Auth] Verificando JWT local...')
  if (!hasValidJWT()) {
    console.log('‚ùå [Middleware Auth] No hay JWT v√°lido, redirigiendo al login')
    // No hay JWT v√°lido, redirigir al login
    return navigateTo('/auth/login')
  }
  
  console.log('‚úÖ [Middleware Auth] JWT v√°lido encontrado, verificando con servidor...')
  
  // Verificar con el servidor (valida JWT + session)
  try {
    const isAuthenticated = await checkAuth()
    
    if (!isAuthenticated) {
      console.log('‚ùå [Middleware Auth] Servidor dice que no est√° autenticado, redirigiendo al login')
      // La verificaci√≥n del servidor fall√≥, redirigir al login
      return navigateTo('/auth/login')
    }
    
    console.log('‚úÖ [Middleware Auth] Usuario autenticado correctamente, continuando...')
    // Usuario autenticado correctamente, continuar
    
  } catch (error) {
    console.warn('‚ùå [Middleware Auth] Error en verificaci√≥n de autenticaci√≥n h√≠brida:', error)
    // En caso de error, redirigir al login por seguridad
    return navigateTo('/auth/login')
  }
})